--loadstring(game:HttpGet'https://raw.githubusercontent.com/bobob4/Ui-Lib/main/v55',true)()
repeat task.wait() until game:IsLoaded() task.wait()
if getgenv().ScreenShift then
	return noti("Gui already loaded")
end
print("123aaaaaaaaa")
-- if game.CoreGui:FindFirstChild("ScreenShift") then
-- 	game.CoreGui.ScreenShift:remove()
-- 	task.wait(1)
-- end
getgenv().ScreenShift = true
getgenv().gui_open44 = "press"
getgenv().gui44 = Enum.KeyCode.LeftControl --hold
getgenv().select44 = Enum.KeyCode.E
getgenv().up44 = Enum.KeyCode.W
getgenv().down44 = Enum.KeyCode.S
getgenv().right44 = Enum.KeyCode.D
getgenv().left44 = Enum.KeyCode.A

getgenv().up45 = Enum.KeyCode.Up
getgenv().down45 = Enum.KeyCode.Down
getgenv().right45 = Enum.KeyCode.Right
getgenv().left45 = Enum.KeyCode.Left

--(255, 255, 255) (246, 246, 246) (153, 170, 181) (35, 39, 42) (44, 47, 51) -- white - dark
getgenv().color34 = Color3.fromRGB(44, 47, 51) -- 153, 170, 181
getgenv().color35 = Color3.fromRGB(35, 39, 42) -- 153, 170, 181
getgenv().color36 = Color3.fromRGB(153, 170, 181) -- 153, 170, 181
getgenv().color37 = Color3.fromRGB(246, 246, 246) -- 153, 170, 181
getgenv().color38 = Color3.fromRGB(255, 255, 255) -- 153, 170, 181

local UI_input
local binder_mode = false
local binder_focus
local dropdown_mode = false
local dropdown_focus
local dropdown_page
local textbox_mode = false
local textbox_focus
local current_selector
local notification_table = {}
local min, max = 0, 20000
--local highlight_vertical_tween_conflict_avoid
local highlight_horizontal_tween_conflict_avoid
local TweenService = game:GetService'TweenService'
local UIS = game:GetService'UserInputService'
	
local screen = Instance.new'ScreenGui'
screen.Parent = game.CoreGui
screen.Enabled = true	--always enable for notification work
screen.Name = "ScreenShift"
screen.IgnoreGuiInset = true
--screen.ZIndexBehavior = 0 --Global -- 1 sibling

local screen_X = screen.AbsoluteSize.X
local screen_Y = screen.AbsoluteSize.Y
local screen_scale_listX = 1/0.08 -- scale x of normal button
local screen_scale_listY = 1/0.05 -- scale y of normal button
print(screen_X, screen_Y)

local frame1 = Instance.new'Frame'
--frame1.Name = 'main'
frame1.Parent = screen
frame1.BackgroundColor3 = color34
frame1.Transparency = 1
frame1.BorderSizePixel = 0
frame1.Size = UDim2.new(1, 0, 1, 0)
frame1.Position = UDim2.new(0, 0, 0, 0)
frame1.ZIndex = 0
frame1.Visible = false

local frame2 = Instance.new'Frame'
--frame2.Name = 'info' -- line n highlight n details n text
frame2.Parent = screen
frame2.BackgroundColor3 = color34
frame2.Transparency = 1
frame2.BorderSizePixel = 0
frame2.Size = UDim2.new(1, 0, 1, 0)
frame2.Position = UDim2.new(0, 0, 0, 0)
frame2.Visible = false

local frame3 = Instance.new'Frame'
--frame3.Name = 'notification'
frame3.Parent = screen
frame3.BackgroundColor3 = color34
frame3.Transparency = 1
frame3.BorderSizePixel = 0
frame3.Size = UDim2.new(1, 0, 1, 0)
frame3.Position = UDim2.new(0, 0, 0, 0)

-- local default_details = Instance.new'Frame'
-- default_details.Parent = frame2
-- default_details.BackgroundColor3 = color34
-- default_details.Transparency = 0.15
-- default_details.BorderSizePixel = 0
-- default_details.Size = UDim2.new(0.2, 0, 0.15, 0)
-- default_details.Position = UDim2.new(0.03, 0, 0.85, 0)
-- default_details.ZIndex = 10

local details = Instance.new'Frame'
details.Parent = frame2
details.BackgroundColor3 = color35
details.Transparency = 0.15
details.BorderSizePixel = 0
details.Size = UDim2.new(1, 0, 0.115, 0) --0.67 , 0 ,0.15, 0
details.Position = UDim2.new(0, 0, 0, 0) -- 0.26
details.ZIndex = 10

local details_txt = Instance.new'TextLabel' -- ui lib's info
details_txt.Parent = frame2
details_txt.BackgroundTransparency = 1
details_txt.Position = UDim2.new(0.02, 0, 0.07, 0)
details_txt.Size = UDim2.new(0.2, 0, 0.05, 0)
details_txt.Font = Enum.Font.ArialBold
details_txt.Text = "Move: <u> WASD </u>, <u> Arrows key </u>\nSelect: <u>"..string.sub(tostring(getgenv().select44), 14).."</u>, Open/Close: <u>"..string.sub(tostring(getgenv().gui44), 14).."</u>" -- support 2 \n
details_txt.TextColor3 = color37
details_txt.TextTransparency = 0.2
details_txt.TextSize = 15
details_txt.TextXAlignment = Enum.TextXAlignment.Left
details_txt.ZIndex = 10
details_txt.RichText = true

local details_txt1 = Instance.new'TextLabel' -- button's name
details_txt1.Parent = frame2
details_txt1.BackgroundTransparency = 1
details_txt1.Position = UDim2.new(0.43, 0, 0.0065, 0)
details_txt1.Size = UDim2.new(0.2, 0, 0.05, 0)
details_txt1.Font = Enum.Font.ArialBold
details_txt1.Text = ''
details_txt1.TextColor3 = color37
details_txt1.TextTransparency = 0.2
details_txt1.TextSize = 20
details_txt1.TextXAlignment = Enum.TextXAlignment.Left
details_txt1.ZIndex = 10

local details_txt2 = Instance.new'TextLabel'  -- button's detail
details_txt2.Parent = frame2
details_txt2.BackgroundTransparency = 1
details_txt2.Position = UDim2.new(0.43, 0, 0.063, 0)
details_txt2.Size = UDim2.new(0.2, 0, 0.05, 0)
details_txt2.Font = Enum.Font.ArialBold
details_txt2.Text = '' -- support 2 \n
details_txt2.TextColor3 = color37
details_txt2.TextTransparency = 0.2
details_txt2.TextSize = 15
details_txt2.TextXAlignment = Enum.TextXAlignment.Left
details_txt2.ZIndex = 10

local details_txt3 = Instance.new'TextLabel' --gui's name
details_txt3.Parent = frame2
details_txt3.BackgroundColor3 = color37
details_txt3.BackgroundTransparency = 0.5
details_txt3.Position = UDim2.new(0.01, 0, 0.12, 0)
details_txt3.Size = UDim2.new(0.28, 0, 0.135, 0)
details_txt3.Font = Enum.Font.ArialBold
details_txt3.Text = 'Auto Farm v3 Auti Fish aSD  123 A  '
details_txt3.TextColor3 = color37
details_txt3.TextTransparency = 0.2
--details_txt3.TextSize = 1 -- doesn't matter cuz TextScaled = true
details_txt3.TextScaled = true --  auto scale to fit the TextLabel.Size || turn out this line is very important in all TextLabel

local highlight_horizontal = Instance.new'Frame'
highlight_horizontal.Parent = frame2
highlight_horizontal.BackgroundColor3 = color37
highlight_horizontal.Transparency = 0
highlight_horizontal.BorderSizePixel = 0
highlight_horizontal.ZIndex = 10

local highlight_vertical = Instance.new'Frame'
highlight_vertical.Parent = frame2
highlight_vertical.BackgroundColor3 = color37
highlight_vertical.Transparency = 0
highlight_vertical.BorderSizePixel = 0
highlight_vertical.ZIndex = 10

local function TS(object, times, tweeninfo, type)
	if type == 1 then -- casual tween
		TweenService:Create(object, TweenInfo.new(times), tweeninfo):Play()
	else -- have to :Play() and :Cancel() but avoid conflict tween
		return TweenService:Create(object, TweenInfo.new(times), tweeninfo)
	end
end

local function hold()
	return UIS:IsKeyDown(gui44)
end

local function all_button()
	if dropdown_mode then
		for _,v in pairs(dropdown_focus:GetChildren()) do
			if v:IsA'Frame' and v.Visible then
				local x = v:GetChildren()
				for _,v2 in pairs(dropdown_focus:GetChildren()) do
					if v2:IsA"TextButton" then
						table.insert(x, v2)
					end
				end
			--task.wait() -- add a little wait so it won't select 2 button(cuz dropdown adding) + universal wait
			return x
			end
		end
	end
	task.wait() -- add a little wait so it won't select 2 button(cuz dropdown adding) + universal waitcheck_to_select()check_binder_or_dropdown_or_textbox_active()
	return frame1:GetChildren()
end

local function highlight()
	-- if current_selector.Parent.Name == 'ScrollingFrame' then -- if interact with dropdown's button
	-- 	if current_selector.Parent.Visible then -- if choosing
	-- 		local a = current_selector.Parent.AbsolutePosition.Y --get min
	-- 		local b = a + 140 -- get max
	-- 		if current_selector.AbsolutePosition.Y < a then -- if < min then roll forward
	-- 			repeat task.wait()
	-- 				current_selector.Parent.CanvasPosition -= Vector2.new(0, 60)
	-- 			until current_selector.AbsolutePosition.Y >= a
	-- 		elseif current_selector.AbsolutePosition.Y > b then -- if > max then roll backward
	-- 			repeat task.wait()
	-- 				current_selector.Parent.CanvasPosition += Vector2.new(0, 60)
	-- 			until current_selector.AbsolutePosition.Y <= b
	-- 		end
	-- 	elseif current_selector.Parent.Visible == false then -- if done chossing  -- back to main button
	-- 		current_selector = current_selector.Parent.Parent -- this for next keymove, highlight
	-- 	end
	-- end
	
	--highlight alr scale follow button absoluteposition no need more scale only pixel
	highlight_horizontal.Position = UDim2.new(0, current_selector.AbsolutePosition.X, 0, current_selector.AbsolutePosition.Y + current_selector.AbsoluteSize.Y + 40) -- fixed distance
	highlight_horizontal.Size = UDim2.new(0, 0, 0, 5)			--ready to tween  size
	highlight_vertical.Position = UDim2.new(0, current_selector.AbsolutePosition.X + current_selector.AbsoluteSize.X + 5, 0, current_selector.AbsolutePosition.Y + current_selector.AbsoluteSize.Y + 40) -- fixed distance
	highlight_vertical.Size = UDim2.new(0, 5, 0, 5)				--ready to tween  size

	details_txt1.Text = current_selector.Text
	if current_selector:GetAttribute("detail") ~= nil and current_selector:GetAttribute("type") ~= nil then
		details_txt2.Text = current_selector:GetAttribute("detail")
		details_txt1.Text = details_txt1.Text.. "  -  " ..current_selector:GetAttribute("type")
	else
		details_txt2.Text = ''
	end

	if highlight_horizontal_tween_conflict_avoid ~= nil then -- check if varibale attached to a tween
		if highlight_horizontal_tween_conflict_avoid.PlaybackState ~= Enum.PlaybackState.Completed then -- check 1 change 2
			-- highlight_vertical_tween_conflict_avoid:Cancel()
			highlight_horizontal_tween_conflict_avoid:Cancel()
		end
	end

	highlight_horizontal_tween_conflict_avoid = TS(highlight_horizontal, 0.5, {Size = UDim2.new(0, current_selector.AbsoluteSize.X * 0.9, 0, 5)}, 2)--80% of real bar ((-)right to left)
	highlight_horizontal_tween_conflict_avoid:Play()

	--highlight_vertical_tween_conflict_avoid = TS(highlight_vertical, 0.5, {Size = UDim2.new(0, 5, 0, current_selector.AbsoluteSize.Y * -1)}, 2)
	--highlight_vertical_tween_conflict_avoid:Play()
end

local function check_binder_or_dropdown_or_textbox_active()
	if binder_mode then
		--current_selector = binder_focus -- might annoying while moving about background button
		highlight()
		--print('you are interact with '.. binder_focus.Text)
		return true
	elseif dropdown_mode then
		--current_selector = dropdown_page -- might annoying while moving about background button
		highlight()
		--print('you are interact with '.. dropdown_focus.Text)
		return true
	elseif textbox_mode then
		--current_selector = dropdown_page -- might annoying while moving about background button
		highlight()
		return true
	end
	return false
end

-- function check_to_select()
-- 	if check_binder_or_dropdown_or_textbox_active() then
-- 		return false
-- 	else return true
-- 	end
-- end

local function reset_xytemp()
	min, max = 0, 20000
end

local function keymove(direction)
	if binder_mode then -- if interact with binder or textbox focus on it --still need this piece not clean at all
		current_selector = binder_focus
		return highlight()
	elseif textbox_mode then
		current_selector = textbox_focus
		return highlight()
	end

	local temp_selector = current_selector -- choosing near button based on direction
	if direction == 'up' then
		for _,v in pairs(all_button()) do
			if v.AbsolutePosition.Y < temp_selector.AbsolutePosition.Y and (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude < max then
				max = (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude
				current_selector = v
			end
		end
	elseif direction == 'down' then
		for _,v in pairs(all_button()) do
			if v.AbsolutePosition.Y > temp_selector.AbsolutePosition.Y and (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude < max then
				max = (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude
				current_selector = v
			end
		end
	elseif direction == 'right' then
		for _,v in pairs(all_button()) do
			if v.AbsolutePosition.X > temp_selector.AbsolutePosition.X and (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude < max then
				max = (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude
				current_selector = v
			end
		end
	elseif direction == 'left' then
		for _,v in pairs(all_button()) do
			if v.AbsolutePosition.X < temp_selector.AbsolutePosition.X and (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude < max then
				max = (v.AbsolutePosition - temp_selector.AbsolutePosition).Magnitude
				current_selector = v
			end
		end
	else 	-- Enter
		if current_selector == nil then return
		elseif not check_binder_or_dropdown_or_textbox_active() and current_selector.ClassName == "TextBox" then -- need for textbox not clean at all
			current_selector:CaptureFocus()
		else
		--elseif check_binder_or_dropdown_or_textbox_active() == false then
		--	return --highlight in check mode_drd n mode_bin local function so  return
		--elseif check_binder_or_dropdown_or_textbox_active() then
			return firesignal(current_selector.MouseButton1Click)
		end
	end
	highlight()
	reset_xytemp()
end

local function text(txt, position, size)
	local text = Instance.new'TextLabel'
	text.Parent = frame2
	text.BackgroundColor3 = color36
	text.BackgroundTransparency = 1
	text.Position = position
	text.Size = UDim2.new(0.2, 0, 0.05, 0)
	text.Font = Enum.Font.ArialBold
	text.Text = "<i>" ..tostring(txt).. "</i>" or "<i> TextLabel </i>"
	text.TextColor3 = color37
	text.TextTransparency = 0.2
	text.TextSize = tonumber(size) or 40
	text.TextXAlignment = Enum.TextXAlignment.Left
	--text.ZIndex = 10
	text.RichText = true
end

local function line(lie_position, lie_size)
	local lie_frame = Instance.new'Frame'
	lie_frame.Parent = frame2
	lie_frame.BackgroundColor3 = color37
	lie_frame.Transparency = 0.7
	lie_frame.Position = lie_position
	lie_frame.BorderSizePixel = 0
	lie_frame.Size = lie_size
	lie_frame.ZIndex = 10
end

function noti(not_detail)
	local not_frame1 = Instance.new'Frame'
	not_frame1.Parent = frame3
	not_frame1.BackgroundColor3 = color34
	--not_frame1.Transparency = 0.15
	not_frame1.BorderSizePixel = 0
	not_frame1.Position = UDim2.new(0.83, 0, 0.9, 0)
	not_frame1.Size = UDim2.new(0, 0, 0.05, 0)  --ready to tween UDim2.new(0, 260, 0, 40)
	not_frame1.ZIndex = 101

	local not_frame2 = Instance.new'Frame'
	not_frame2.Parent = not_frame1
	not_frame2.BackgroundColor3 = color37
	not_frame2.BackgroundTransparency = 0.5
	not_frame2.BorderSizePixel = 0
	not_frame2.Position = UDim2.new(0, 0, 0.775, 0)
	not_frame2.Size = UDim2.new(1, 0, 0.1, 0)
	not_frame2.ZIndex = 101

	local not_frame3 = Instance.new'Frame'
	not_frame3.Parent = not_frame1
	not_frame3.BackgroundColor3 = color37
	--not_frame3.Transparency = 0.6
	not_frame3.BorderSizePixel = 0
	not_frame3.Position = UDim2.new(0, 0, 1, 0)
	not_frame3.Size = UDim2.new(1, 0, 0.2, 0)	
	not_frame3.ZIndex = 101
	
	local not_text = Instance.new'TextLabel'
	not_text.Parent = not_frame1
	not_text.BackgroundTransparency = 1
	not_text.Position = UDim2.new(0, 0, 0, 0)
	not_text.Size = UDim2.new(1, 0, 1, 0)
	not_text.Font = Enum.Font.ArialBold
	not_text.Text = tostring(not_detail) or 'Notification'
	not_text.TextColor3 = color37
	not_text.TextSize = 15
	not_text.ZIndex = 101

	--print(#notification_table) -- still work but need fix 
	--print(notification_table[2]) -- still work but need fix 
	if #notification_table >= 3 then
		--TS(notification_table[1], 0.3, {Size = UDim2.new(0, 0, 0, 0)}, 1)
		notification_table[1]:destroy() -- destroy the last one from the game
		table.remove(notification_table, 1) -- remove last one from the list

		TS(notification_table[1], 0.5, {Position = UDim2.new(0.83, 0, 0.74, 0)}, 1) -- move the first and second
		TS(notification_table[2], 0.5, {Position = UDim2.new(0.83, 0, 0.82, 0)}, 1)	
	elseif #notification_table == 2 then
		TS(notification_table[1], 0.5, {Position = UDim2.new(0.83, 0, 0.74, 0)}, 1) -- move the first and second
		TS(notification_table[2], 0.5, {Position = UDim2.new(0.83, 0, 0.82, 0)}, 1)
	elseif #notification_table == 1 then
		TS(notification_table[1], 0.5, {Position = UDim2.new(0.83, 0, 0.82, 0)}, 1) -- move the first
	end
	table.insert(notification_table, not_frame1)
	TS(notification_table[#notification_table], 0.5,  {Size = UDim2.new(0.16, 0, 0.05, 0)}, 1)
	task.spawn(function() -- spawn a thread to wait()
		task.wait(7)
		not_frame1:destroy()
		--table.remove(notification_table, notification_table[not_frame1]) -- still work but need fix 
	end)
end

local function button(btn_name, btn_detail, btn_position, btn_callback)
	local button = Instance.new'TextButton'
	button.Parent = frame1
	button.BackgroundColor3 = color36
	button.BackgroundTransparency = 0.8
	button.BorderSizePixel = 0
	button.Position = btn_position
	button.Size = UDim2.new(0.08, 0, 0.05, 0)
	button.Font = Enum.Font.GothamBlack
	button.Text = tostring(btn_name) or 'Button'
	button.TextColor3 = color37
	button.TextTransparency = 0.2
	button.TextSize = 16
	button.TextTruncate = Enum.TextTruncate.AtEnd
	button:SetAttribute("detail", btn_detail)
	button:SetAttribute("type", "[BUTTON]")

	button.MouseEnter:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = button
		highlight()
	end)

	button.MouseButton1Click:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = button
		highlight()
		btn_callback()
	end)
end

local function toggle(tog_name, tog_detail, tog_status, tog_position, tog_callback) 
	local tog_button = Instance.new'TextButton'
	tog_button.Parent = frame1
	tog_button.BackgroundColor3 = color36
	tog_button.BackgroundTransparency = 0.8
	tog_button.BorderSizePixel = 0
	tog_button.Position = tog_position
	tog_button.Size = UDim2.new(0.08, 0, 0.05, 0)
	tog_button.Font = Enum.Font.GothamBlack
	tog_button.Text = tostring(tog_name) or 'Toggle'
	tog_button.TextColor3 = color37
	tog_button.TextTransparency = 0.2
	tog_button.TextSize = 16
	tog_button.ZIndex = 2 -- 2 so it over tog_frame?
	tog_button.TextTruncate = Enum.TextTruncate.AtEnd
	tog_button:SetAttribute("detail", tog_detail)
	tog_button:SetAttribute("type", "[TOGGLE]")

	local tog_frame = Instance.new'Frame'
	tog_frame.Parent = tog_button
	tog_frame.BackgroundColor3 = color36
	tog_frame.BackgroundTransparency = 0.8
	tog_frame.BorderSizePixel = 0
	tog_frame.Position = UDim2.new(1.15, 0, 0.5, 0)
	tog_frame.Size = UDim2.new(0.25, 0, 0.75, 0)
	tog_frame.AnchorPoint = Vector2.new(0.5, 0.5)

	tog_button.MouseEnter:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = tog_button
		highlight()
	end)

	tog_button.MouseButton1Click:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = tog_button
		highlight()

		tog_status = not tog_status
		if tog_status then
			TS(tog_frame, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
			TS(tog_frame, 0.2, {BackgroundColor3 = color37}, 1)
			TS(tog_frame, 0.2, {BackgroundTransparency = 0}, 1)
		else
			TS(tog_frame, 0.2, {Size = UDim2.new(0.25, 0, 0.75, 0)}, 1)
			TS(tog_frame, 0.2, {BackgroundColor3 = color36}, 1)
			TS(tog_frame, 0.2, {BackgroundTransparency = 0.8}, 1)
		end
		tog_callback(tog_status)
	end)
	if tog_status then -- first check for true/false
		TS(tog_frame, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
		TS(tog_frame, 0.2, {BackgroundColor3 = color37}, 1)
		TS(tog_frame, 0.2, {BackgroundTransparency = 0}, 1)
	end
	tog_callback(tog_status)
end

local function box(box_name, box_detail, box_position, box_callback)
	local box_button = Instance.new"TextBox"
	box_button.Parent = frame1
	box_button.BackgroundColor3 = color36
	box_button.BackgroundTransparency = 0.8
	box_button.BorderSizePixel = 0
	box_button.Position = box_position
	box_button.Size = UDim2.new(0.08, 0, 0.02, 0)
	box_button.Font = Enum.Font.ArialBold
	box_button.Text = tostring(box_name) or "Text input" -- only first render
	box_button.TextColor3 = color37
	box_button.TextTransparency = 0.2
	box_button.TextSize = 16
	box_button.PlaceholderText = tostring(box_name) or "Text input" --same as text buton every time
	box_button.PlaceholderColor3 = color37
	box_button.RichText = true
	box_button.TextTruncate = Enum.TextTruncate.AtEnd
	box_button:SetAttribute("detail", box_detail)
	box_button:SetAttribute("type", "[TEXT INPUT]")

	box_button.MouseEnter:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = box_button
		highlight()
	end)

	box_button.FocusLost:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then -- need this line no MouseButton1Click -> Focused - FocusLost
			if textbox_mode then
				if textbox_focus == box_button then -- mode is on current button -> end mode
					task.wait(.08) -- need a bit delay so it wont change mode too fast
					--box_button.Text = tostring(box_name) or "Input" -- this will mess callback() up
					textbox_mode = false
					textbox_focus = nil
		
					if box_button.ZIndex > 5 then --check 1 change 2  --focus mode end
						box_button.ZIndex -= 5
					end
					TS(frame1, 0.25,{ZIndex = 0}, 1) --focus mode end
		
					box_callback(box_button.ContentText)
				end
			end
			return -- mode is on others buutton
		else
			task.wait(.08) -- need a bit delay so it wont change mode too fast
			textbox_mode = false
			textbox_focus = nil

			if box_button.ZIndex > 5 then --check 1 change 2  --focus mode end
				box_button.ZIndex -= 5
			end
			TS(frame1, 0.25,{ZIndex = 0}, 1) --focus mode end

			box_callback(box_button.ContentText)
		end
	end)

	box_button.Focused:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			box_button:ReleaseFocus() -- other mode active -> FocusLost
			return
		else
			textbox_mode = true
			textbox_focus = box_button
			current_selector = box_button
			highlight()

			if box_button.ZIndex < 5 then --check 1 change 2 --focus mode start
				box_button.ZIndex += 5
			end
			TS(frame1, 0.25,{ZIndex = 5}, 1) --focus mode start
		end
	end)
	-- in textbow_mode WASD still move able?
	--captuurefocus on keymove to start focus on press E?
end

local function binder(bin_name, bin_detail, bin_position, bin_key, bin_callback)
	local bin_button = Instance.new'TextButton'
	bin_button.Parent = frame1
	bin_button.BackgroundColor3 = color36
	bin_button.BackgroundTransparency = 0.8
	bin_button.BorderSizePixel = 0
	bin_button.Position = bin_position
	bin_button.Size = UDim2.new(0.08, 0, 0.05, 0)
	bin_button.Font = Enum.Font.GothamBlack
	bin_button.Text = tostring(bin_name) or "Binder"
	bin_button.TextColor3 = color37
	bin_button.TextTransparency = 0.2
	bin_button.TextSize = 16
	bin_button.ZIndex = 2 --2 so it over bin_info?
	bin_button.TextTruncate = Enum.TextTruncate.AtEnd
	bin_button:SetAttribute("detail", bin_detail)
	bin_button:SetAttribute("type", "[BINDER]")

	local bin_info = Instance.new'TextLabel'
	bin_info.Parent = bin_button
	--bin_info.BackgroundColor3 = color36	
	bin_info.BackgroundTransparency = 1
	bin_info.BorderSizePixel = 0
	bin_info.Position = UDim2.new(1.2, 0, 0.1, 0)
	bin_info.Size = UDim2.new(0.8, 0, 0.8, 0)
	bin_info.Font = Enum.Font.GothamBlack
	bin_info.Text = "<u>" ..string.sub(tostring(bin_key), 14).. "</u>"
	bin_info.TextColor3 = color37
	bin_info.TextSize = 12
	bin_info.RichText = true
	bin_info.TextXAlignment = Enum.TextXAlignment.Left

	bin_button.MouseEnter:Connect(function()
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = bin_button
		highlight()
	end)

	local changing = false -- a toggle for changing mode
	bin_button.MouseButton1Click:Connect(function() -- on click choose a new key
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end
		
		current_selector = bin_button
		highlight()

		if not changing then -- enter changing key bind mode
			changing = true
			binder_mode = true -- global variable for binder mode
			binder_focus = bin_button  -- focus on this button
			bin_info.Text = 'press a key'
			if bin_button.ZIndex < 5 then --check 1 change 2 --focus mode start
				bin_button.ZIndex += 5
				bin_info.ZIndex +=5
			end
			TS(frame1, 0.25,{ZIndex = 5}, 1) --focus mode start

			local x1
			x1 = UIS.InputEnded:Connect(function(x)
				if frame1.Visible then
					if x.KeyCode == getgenv().gui44 or x.KeyCode == getgenv().select44 or x.KeyCode == Enum.KeyCode.Unknown then
						noti"Please choose another key"
					else task.wait() -- add a bit delay so it don't callback() on changing
						changing = false
						binder_mode = false
						binder_focus = nil
						bin_key = x.KeyCode
						bin_info.Text = "<u>" ..string.sub(tostring(bin_key), 14).. "</u>" -- Enum.Keycode. | string.sub(cut from x to y) cut from 14 to end
						if bin_button.ZIndex > 5 then --check 1 change 2  --focus mode end
							bin_button.ZIndex -= 5
							bin_info.ZIndex -=5
						end
						TS(frame1, 0.25,{ZIndex = 0}, 1) --focus mode end
						x1:Disconnect()

					end
				end
			end)
		end
	end)

	UIS.InputEnded:Connect(function(x) --main trigger
		if x.KeyCode == bin_key and not changing then -- won't trigger when changing (old key)
			bin_callback()
		end
	end)
end

local function slider(sli_name, sli_detail, sli_position, sli_min, sli_max, sli_input_default, sli_callback)
	local sli_button = Instance.new'TextButton'
	sli_button.Parent = frame1
	sli_button.BackgroundColor3 = color36
	sli_button.BackgroundTransparency = 0.8
	--sli_button.Transparency = 1
	sli_button.BorderSizePixel = 0
	sli_button.Position =  sli_position
	sli_button.Size = UDim2.new(0.14, 0, 0.02, 0)
	sli_button.Font = Enum.Font.SourceSans
	sli_button.Text = tostring(sli_name) or "Slider"
	sli_button.TextTransparency = 1
	--sli_button.TextColor3 = color37
	--sli_button.TextSize = 14
	sli_button:SetAttribute("detail", sli_detail)
	sli_button:SetAttribute("type", "[SLIDER]")

	local sli_info = Instance.new'TextLabel'
	sli_info.Parent = sli_button
	--sli_info.BackgroundColor3 = color37
	sli_info.BackgroundTransparency = 1
	sli_info.BorderSizePixel = 0
	sli_info.Position = UDim2.new(1.05, 0, 0.5, 0)
	sli_info.Size = UDim2.new(0.8, 0, 1, 0)
	sli_info.Font = Enum.Font.GothamBlack
	sli_info.Text = 'Value'
	sli_info.TextColor3 = color37
	sli_info.TextSize = 12
	sli_info.TextXAlignment = Enum.TextXAlignment.Left
	sli_info.TextTruncate = Enum.TextTruncate.AtEnd
	sli_info.AnchorPoint = Vector2.new(0, 0.5) -- only Y cuz need stay at middle | X will move not what we want so 0

	local sli_filll = Instance.new'Frame'
	sli_filll.Parent = sli_button
	sli_filll.BackgroundColor3 = color37
	sli_filll.BackgroundTransparency = 0.4  -- fixed transparency
	sli_filll.BorderSizePixel = 0
	--sli_filll.Position = empty -> UDim2.new(0,0,0,0)
	--sli_filll.Size = no need cuz slider_default

	if sli_min > sli_max then																				--min, max double check
		local temp = sli_min
		sli_min = sli_max
		sli_max = temp
	end

	local sli_default = math.clamp(sli_input_default, sli_min, sli_max)										--(x, min, max) -> return middle number

	sli_filll.Size = UDim2.new(sli_default/sli_max, 0, 1, 0)												--default fill
	sli_info.Text = tostring(sli_default).. " | " .. tostring(sli_name)										--default info
	sli_callback(sli_default)																				--default default callback


	local sli_toggle = false			
	local function sli_start() return sli_button.AbsolutePosition.X	end										--mouse's
	local function sli_end() return sli_button.AbsoluteSize.X end											--mouse's																--mouse's
	local function mouse() return UIS:GetMouseLocation().X end												--mouse's
	local function GuiCapture() return math.clamp(((mouse() - sli_start())/ sli_end()), 0, 1) end			--mouse's
	local function value() return math.floor(sli_min + (sli_max - sli_min)* GuiCapture()) end				--mouse's
	local sli_button_percentage = 0 -- 0 cuz +1 at start														--keyboard's
	local function sli_loop() -- (0, 0.1,->1)																	--keyboard's
		sli_button_percentage += 1  -- 0.1 + 0.2 ~= 0.3 -> can't use so -> interger
		if tostring(sli_button_percentage) == tostring(11) then -- take 10 not 11
			sli_button_percentage = 0
		end
	end

	sli_button.MouseEnter:Connect(function()															--mouse in
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = sli_button	
		highlight()
	end)

	local sli_press = UIS.InputEnded:Connect(function(x) 													--keyboard capture
		if frame1.Visible and current_selector == sli_button and x.KeyCode == select44  then
			if check_binder_or_dropdown_or_textbox_active() then
				return
			end

			--current_selector = sli_button	
			highlight()

			sli_loop()
			TS(sli_filll, 0.15, {Size = UDim2.new(0, (sli_button.AbsoluteSize.X * sli_button_percentage)/10, 1, 0)}, 1) -- /10 out side cuz no +-
			sli_info.Text = tostring(math.clamp(sli_min, math.floor((sli_min + (sli_max - sli_min)* sli_button_percentage/10)), sli_max)).. " | " .. tostring(sli_name)
			-- /10 insside cuz theres +-
			sli_callback(math.clamp(sli_min, math.floor((sli_min + (sli_max - sli_min)* sli_button_percentage/10)), sli_max))
		end
	end)

	sli_button.MouseButton1Down:Connect(function() 															--mouse capture
		if check_binder_or_dropdown_or_textbox_active() then
			return
		end

		current_selector = sli_button
		highlight()

		sli_toggle = true -- on
		local off = UIS.InputEnded:Connect(function(x)
			if x.UserInputType == Enum.UserInputType.MouseButton1 then
				sli_toggle = false -- off
			end
		end)
		repeat task.wait()
			TS(sli_filll, 0.15, {Size = UDim2.new(GuiCapture(), 0, 1, 0)}, 1)
			sli_info.Text = tostring(value()).. " | " .. tostring(sli_name)
			sli_callback(value())
		until not sli_toggle
		off:Disconnect()	
	end)
end

-- local function dropdown(drd_name, drd_position, drd_list, drd_callback) --return string within list
-- 	local drd_button = Instance.new'TextButton'
-- 	drd_button.Parent = frame1
-- 	drd_button.BackgroundColor3 = color37
-- 	drd_button.Transparency = 0.2
-- 	drd_button.BorderSizePixel = 0
-- 	drd_button.Position = drd_position
-- 	drd_button.Size = UDim2.new(0, 110, 0, 35)
-- 	drd_button.Font = Enum.Font.GothamBlack
-- 	drd_button.Text = tostring(drd_name)
-- 	drd_button.TextColor3 = color37
-- 	drd_button.TextSize = 14
-- 	drd_button.ZIndex = 3

-- 	local drd_info = Instance.new'TextLabel'
-- 	drd_info.Parent = drd_button
-- 	drd_info.BackgroundColor3 = color34
-- 	drd_info.BackgroundTransparency = 0.15
-- 	drd_info.BorderSizePixel = 0
-- 	drd_info.Position = UDim2.new(-0.4, 0, 0, 0)
-- 	drd_info.Size = UDim2.new(0.4, 0, 1, 0)
-- 	drd_info.Font = Enum.Font.ArialBold
-- 	drd_info.Text = '+'
-- 	drd_info.TextColor3 = color37
-- 	drd_info.TextSize = 20

-- 	local drd_scroll = Instance.new'ScrollingFrame'
-- 	drd_scroll.Parent = drd_button
-- 	--drd_scroll.BackgroundColor3 = color34
-- 	drd_scroll.BackgroundTransparency = 1
-- 	drd_scroll.BorderSizePixel = 0
-- 	drd_scroll.Position = UDim2.new(-0.4, 0, 1.5, 0)
-- 	drd_scroll.Size = UDim2.new(1.4, 0, 5, 0)
-- 	drd_scroll.Visible = false
-- 	--drd_scroll.CanvasSize = UDim2.new(0,500,2,500) --need calculate [BELOW] 
-- 	drd_scroll.ScrollingDirection = 'Y' -- no need X input on CanvasSize
-- 	drd_scroll.ScrollBarThickness = 5
-- 	--drd_scroll.VerticalScrollBarPosition = 'Right' --default alr
-- 	--drd_scroll.ScrollBarImageColor3 = color37
-- 	drd_scroll.ScrollBarImageTransparency = 0
-- 	drd_scroll.ZIndex = 4

-- 	local function change_dropdown_icon() -- local function so it work for multi dropdown
-- 		if drd_scroll.Visible == false then 
-- 			drd_info.Text = '+'
-- 			TS(frame1, 0.25,{ZIndex = 0})
-- 		else drd_info.Text = '...'
-- 			TS(frame1, 0.25,{ZIndex = 4})
-- 		end
-- 	end

-- 	local drd_scroll_btn_distance = 0
-- 	for _,v in pairs(drd_list) do
-- 		local drd_scroll_btn = Instance.new'TextButton'
-- 		drd_scroll_btn.Parent = drd_scroll
-- 		drd_scroll_btn.BackgroundColor3 = color37
-- 		drd_scroll_btn.Transparency = 0.2
-- 		drd_scroll_btn.BorderSizePixel = 0
-- 		drd_scroll_btn.Position = UDim2.new(0,0,0,drd_scroll_btn_distance) --first button
-- 		drd_scroll_btn_distance += 50	-- next button 
-- 		drd_scroll_btn.Size = UDim2.new(0, 110, 0, 35)
-- 		drd_scroll_btn.Font = Enum.Font.GothamBlack
-- 		drd_scroll_btn.Text = tostring(v) or 'Text'
-- 		drd_scroll_btn.TextColor3 = color37
-- 		drd_scroll_btn.TextSize = 14
-- 		drd_scroll_btn.ZIndex = 5

-- 		drd_scroll_btn.MouseEnter:Connect(function()
-- 			current_selector = drd_scroll_btn
-- 			highlight()
-- 		end)
	
-- 		drd_scroll_btn.MouseButton1Click:Connect(function()
-- 			drd_scroll.Visible = false
-- 			change_dropdown_icon()
-- 			drd_button.Text = drd_scroll_btn.Text
-- 			drd_callback(drd_button.Text) --return text
-- 		end)
-- 	end

-- 	drd_scroll.CanvasSize = UDim2.new(0, 0, 2, drd_scroll_btn_distance - 85) --no need X scale or offset cuz this is dropdown(Y) not inventory or chart(XY) 85 just a fixed number

-- 	drd_button.MouseEnter:Connect(function()
-- 		current_selector = drd_button
-- 		highlight()
-- 	end)

-- 	drd_button.MouseButton1Click:Connect(function()
-- 		drd_scroll.Visible = not drd_scroll.Visible
-- 		change_dropdown_icon()
-- 		drd_callback(drd_button.Text) --return text
-- 	end)
-- 	drd_callback(drd_button.Text) --return text
-- end

local function dropdown2(drd_name, drd_detail, drd_position, drd_target, drd_datatype, drd_list, drd_callback) --return string within list
	local drd_button = Instance.new'TextButton'
	drd_button.Parent = frame1
	drd_button.BackgroundColor3 = color36
	drd_button.BackgroundTransparency = 0.8
	drd_button.BorderSizePixel = 0
	drd_button.Position = drd_position
	drd_button.Size = UDim2.new(0.08, 0, 0.05, 0)
	drd_button.Font = Enum.Font.GothamBlack
	drd_button.Text = tostring(drd_name) or "List"
	drd_button.TextColor3 = color37
	drd_button.TextTransparency = 0.2
	drd_button.TextSize = 16
	drd_button.TextTruncate = Enum.TextTruncate.AtEnd
	--drd_button.ZIndex = 1
	drd_button:SetAttribute("detail", drd_detail)
	drd_button:SetAttribute("type", "[LIST]")

	local drd_info = Instance.new'TextLabel'
	drd_info.Parent = drd_button
	drd_info.BackgroundColor3 = color36
	drd_info.BackgroundTransparency = 1
	drd_info.BorderSizePixel = 0
	drd_info.Position = UDim2.new(1.2, 0, 0.1, 0)
	drd_info.Size = UDim2.new(0.8, 0, 0.8, 0)
	drd_info.Font = Enum.Font.GothamBlack
	drd_info.Text = '|. . .|'
	drd_info.TextColor3 = color37
	drd_info.TextSize = 12
	--drd_info.ZIndex = 4
	drd_info.TextXAlignment = Enum.TextXAlignment.Left

	local drd_button_page = Instance.new'TextButton'
	drd_button_page.Parent = drd_button
	drd_button_page.BackgroundColor3 = color36
	drd_button_page.BackgroundTransparency = 0.8
	drd_button_page.BorderSizePixel = 0
	drd_button_page.Position = UDim2.new((((screen_scale_listX-drd_button.Size.X.Scale*2)-(screen_scale_listX-drd_button.Size.X.Scale*2)/1.67)-screen_scale_listX*drd_button.Position.X.Scale)+0.2,0,
	((screen_scale_listY-drd_button.Size.Y.Scale)-(screen_scale_listY-drd_button.Size.Y.Scale)/4)-screen_scale_listY*drd_button.Position.Y.Scale,0)
	-- scale explain -> ((screen - 2 buttons's size)-(screen - 2 buttons's size)/1.67)-screen* button's position || /4 -> far enough from drd_list_button to make sure navigate button work
	-- 1.67, 4 are fixed number, +0.2 is space between 2 button
--[[offset
	-- drd_button_page.Position = UDim2.new(0,((screen_X-(drd_button.AbsoluteSize.X * 2 + 20))-(screen_X-(drd_button.AbsoluteSize.X * 2 + 20))/2)-drd_button.AbsolutePosition.X,
	-- 0, ((screen_Y - drd_button.AbsoluteSize.Y)-(screen_Y - drd_button.AbsoluteSize.Y)/3)-drd_button.AbsolutePosition.Y)
	---- offset explain -> (drd_button.AbsoluteSize.X * 2 + 20) 2 button, 20 space between || (screen_Y - drd_button.AbsoluteSize.Y)/3 -> far enough from drd_list_button to make sure navigate button work
]]
	drd_button_page.Size = UDim2.new(1, 0, 1, 0)
	drd_button_page.Font = Enum.Font.GothamBlack
	drd_button_page.Text = tostring(drd_name) or "List"
	drd_button_page.TextColor3 = color37
	drd_button_page.TextTransparency = 0.2
	drd_button_page.TextSize = 16
	drd_button_page.TextTruncate = Enum.TextTruncate.AtEnd
	drd_button_page.Visible = false
	drd_button_page.ZIndex = 6 --set high as default cuz we gonna change it's visible

	local drd_button_page_info = Instance.new'TextLabel'
	drd_button_page_info.Parent = drd_button_page
	drd_button_page_info.BackgroundColor3 = color36
	drd_button_page_info.BackgroundTransparency = 1
	drd_button_page_info.BorderSizePixel = 0
	drd_button_page_info.Position = UDim2.new(-0.4, 0, 0.1, 0)
	drd_button_page_info.Size = UDim2.new(0.4, 0, 0.8, 0)
	drd_button_page_info.Font = Enum.Font.GothamBlack
	drd_button_page_info.Text = '1/1'
	drd_button_page_info.TextColor3 = color37
	drd_button_page_info.TextSize = 12
	drd_button_page_info.ZIndex = 6 --set high as default cuz we gonna change it's parent visible

	local drd_button_exit = Instance.new'TextButton'
	drd_button_exit.Parent = drd_button
	drd_button_exit.BackgroundColor3 = color36
	drd_button_exit.BackgroundTransparency = 0.8
	drd_button_exit.BorderSizePixel = 0
	drd_button_exit.Position = drd_button_page.Position + UDim2.new(1.2, 0, 0, 0)
	drd_button_exit.Size = UDim2.new(1, 0, 1, 0)
	drd_button_exit.Font = Enum.Font.GothamBlack
	drd_button_exit.Text = 'Exit'
	drd_button_exit.TextColor3 = color37
	drd_button_exit.TextTransparency = 0.2
	drd_button_exit.TextSize = 16
	drd_button_exit.Visible = false
	drd_button_exit.ZIndex = 6 --set high as default cuz we gonna change it's visible
	
	local drd_frame_table = {}
	local drd_list_return = {}	
	local drd_single_button
	local drd_maxbutton_row = 6
	local drd_maxbutton_page = drd_maxbutton_row * 3 -- 3row
	local drd_frame_display = 1
	local drd_button_X_distance = -3.75 -- 4.5 + 0.75 (1.5 each button + 0.75(space of the third button's space))
	local drd_list_frame_X = ((screen_scale_listX-drd_button.Size.X.Scale)-(screen_scale_listX-drd_button.Size.X.Scale)/1.86)-screen_scale_listX*drd_button.Position.X.Scale
	local drd_list_frame_Y = ((screen_scale_listY-drd_button.Size.Y.Scale)-(screen_scale_listY-drd_button.Size.Y.Scale)/1.3)-screen_scale_listY*drd_button.Position.Y.Scale
	-- scale explain -> (screen - button's size)-(screen- button's size)/1.86)-screen* button's position
	-- 1.86, 1.3 are fixed number
--[[offset
	-- local drd_list_frame_X = ((screen_X - drd_button.AbsoluteSize.X)-(screen_X - drd_button.AbsoluteSize.X)/2)-drd_button.AbsolutePosition.X
	---- formular for desired screen AbsolutePosition offset of a decendant| Desired[offset] - Parent.AbsolutePosition.X
	---- Desired[offset] | ((screen_X - all button and space between)-(screen_X - all button and space between)/2)
	---- /2 meant middle of screen
	-- local drd_list_frame_Y = ((screen_Y - drd_button.AbsoluteSize.Y)-(screen_Y - drd_button.AbsoluteSize.Y)/1.2)-drd_button.AbsolutePosition.Y 
	---- 1.2 (first button at high then 2 others row get down)
]]

	if drd_datatype == "static" then				-- STATIC
		for i = 1, #drd_list, drd_maxbutton_page do -- creat a frame every 18 button
			local drd_frame = Instance.new'Frame'
			drd_frame.Parent = drd_button
			drd_frame.BackgroundColor3 = color37
			drd_frame.BackgroundTransparency = 1
			drd_frame.BorderSizePixel = 0
			drd_frame.Position = UDim2.new(drd_list_frame_X, 0, drd_list_frame_Y, 0)
			drd_frame.Size = UDim2.new(1, 0, 1, 0) --doesn't matter this frame just for visible button inside (scale 1, 1 for easier placing button inside)
			drd_frame.Visible = false
			--drd_frame.ZIndex = 4
		end

		for _,v in pairs(drd_button:GetChildren()) do -- making a frame table
			if v:IsA'Frame' then
				table.insert(drd_frame_table, v)
			end
		end

		local function drd_getframe(x) -- get frame to place button in, x is button in numerical order
			local frame_position = 1
			repeat task.wait()
				if (x - drd_maxbutton_page) >= 1 then -- current button - 18 button
					frame_position += 1 -- new frame
				end
				x -= drd_maxbutton_page -- setup next x for loop
			until x <= 0 -- no need more frame
			return frame_position
		end

		local function drd_getbutton(x) -- makesure button in numerical order is smaller than maxbutton/page
			if x <= drd_maxbutton_page then -- smaller than max button on screen
				return x
			else -- greater max button/page
				repeat
					x -= drd_maxbutton_page
				until x <= drd_maxbutton_page
			return x
			end
		end

		local function drd_get_nextframe() -- get frame for 'Page' button
			for _,v in pairs(drd_frame_table) do
				if v.Visible then
					drd_frame_display += 1 -- + 1 page if there a visible page
					break
				end
			end
			if drd_frame_display > #drd_frame_table then -- reset page
				drd_frame_display = 1
			end
		end

		for i,v in pairs(drd_list) do
			local drd_list_button = Instance.new'TextButton'
			drd_list_button.Parent = drd_frame_table[drd_getframe(i)]
			drd_list_button.BackgroundColor3 = color36
			drd_list_button.BackgroundTransparency = 0.8
			drd_list_button.BorderSizePixel = 0
			--drd_list_button.Position = --this will be set below
			drd_list_button.Size = UDim2.new(1, 0, 1, 0)
			drd_list_button.Font = Enum.Font.GothamBlack
			drd_list_button.Text = tostring(v)
			drd_list_button.TextColor3 = color37
			drd_list_button.TextTransparency = 0.2
			drd_list_button.TextSize = 16
			drd_list_button.ZIndex = 6 --set high as default cuz we gonna change visible of it's parent frame
			drd_list_button.TextTruncate = Enum.TextTruncate.AtEnd
			drd_list_button:SetAttribute("detail", drd_detail)
			drd_list_button:SetAttribute("type", "[TOGGLE]")
		
			local drd_list_button_frame = Instance.new'Frame'
			drd_list_button_frame.Parent = drd_list_button
			drd_list_button_frame.BackgroundColor3 = color36
			drd_list_button_frame.BackgroundTransparency = 0.8
			drd_list_button_frame.BorderSizePixel = 0
			drd_list_button_frame.Position = UDim2.new(1.15, 0, 0.5, 0)
			drd_list_button_frame.Size = UDim2.new(0.25, 0, 0.75, 0)
			drd_list_button_frame.ZIndex = 5 --set high as default cuz we gonna change visible of it's parent frame
			drd_list_button_frame.AnchorPoint = Vector2.new(0.5, 0.5)

			drd_list_button.MouseEnter:Connect(function()
				current_selector = drd_list_button
				highlight()
			end)
		
			local tf = false
			drd_list_button.MouseButton1Click:Connect(function()
				tf = not tf
				if drd_target == 'single' then --single select
					if tf then
						current_selector = drd_list_button
						highlight()

						if drd_single_button ~= nil then -- other button is active
							firesignal(drd_single_button.MouseButton1Click) -- trigger tf(false) of that button
						end
						
						table.clear(drd_list_return) --empty list
						drd_list_return[1] = v --add this button's name
						drd_single_button = drd_list_button --active button
						TS(drd_list_button_frame, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundColor3 = color37}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundTransparency = 0}, 1)
					else
						if current_selector == drd_list_button then --highlight this button when false but not by the firesignal above
							highlight()
						end

						table.clear(drd_list_return)--empty list, will trigger by firesignal above
						drd_single_button = nil --no actice button
						TS(drd_list_button_frame, 0.2, {Size = UDim2.new(0.25, 0, 0.75, 0)}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundColor3 = color36}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundTransparency = 0.8}, 1)
					end
				else --multi slect
					current_selector = drd_list_button
					highlight()

					if tf then
						if not table.find(drd_list_return, v) then
							table.insert(drd_list_return, v) --add this button's name to list
						end
						--table.insert(drd_list_return, v) --add this button's name to list
						TS(drd_list_button_frame, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundColor3 = color37}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundTransparency = 0}, 1)
					else
						if table.find(drd_list_return, v) then
							table.remove(drd_list_return, table.find(drd_list_return, v))
						end
						-- for i2,v2 in pairs(drd_list_return) do
						-- 	if v2 == v then --remove this button's name from list
						-- 		table.remove(drd_list_return, i2)
						-- 	end
						-- end
						TS(drd_list_button_frame, 0.2, {Size = UDim2.new(0.25, 0, 0.75, 0)}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundColor3 = color36}, 1)
						TS(drd_list_button_frame, 0.2, {BackgroundTransparency = 0.8}, 1)
					end
				end
				drd_callback(drd_list_return) --return list
			end)

			if drd_getbutton(i) < drd_maxbutton_row then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 0, 0) --Y first line(frame)
				drd_button_X_distance += 1.5
			elseif drd_getbutton(i) == drd_maxbutton_row then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 0, 0)
				drd_button_X_distance = -3.75 --reset(newline)
			elseif drd_getbutton(i) < drd_maxbutton_row * 2 then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 2.5, 0) --Y scale second line
				drd_button_X_distance += 1.5
			elseif drd_getbutton(i) == drd_maxbutton_row * 2 then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 2.5, 0)
				drd_button_X_distance = -3.75 --reset(newline)
			elseif drd_getbutton(i) < drd_maxbutton_page then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 5, 0) --Y scale third line
				drd_button_X_distance += 1.5
			elseif drd_getbutton(i) == drd_maxbutton_page then
				drd_list_button.Position = UDim2.new(drd_button_X_distance, 0, 5, 0)
				drd_button_X_distance = -3.75 --reset(newline)
			end
		end

		drd_button_exit.MouseEnter:Connect(function()
			current_selector = drd_button_exit
			highlight()
		end)

		drd_button_exit.MouseButton1Click:Connect(function()
			current_selector = drd_button
			highlight()
			dropdown_mode = false
			dropdown_focus = nil
			dropdown_page = nil
			drd_button_exit.Visible = false
			drd_button_page.Visible = false
			for _,v in pairs(drd_frame_table) do
				v.Visible = false
			end
			TS(frame1, 0.25,{ZIndex = 0}, 1) --focus mode end
		end)

		drd_button_page.MouseEnter:Connect(function()
			current_selector = drd_button_page
			highlight()
		end)

		drd_button_page.MouseButton1Click:Connect(function()
			highlight() -- jsut for animation

			drd_get_nextframe()
			if #drd_frame_table > 1 then --if more than 1 page
				drd_button_page_info.Text = (drd_frame_display.. "/".. #drd_frame_table)
			else
				drd_button_page_info.Text = "1/1"
			end

			if drd_frame_display == 1 then --if first button then hide the last page
				drd_frame_table[#drd_frame_table].Visible = false
			else -- hide the previous page
				drd_frame_table[drd_frame_display-1].Visible = false
			end
			drd_frame_table[drd_frame_display].Visible = true
		end)

		drd_button.MouseEnter:Connect(function()
			if not check_binder_or_dropdown_or_textbox_active() then
				current_selector = drd_button
				highlight()
			end
		end)
		
		drd_button.MouseButton1Click:Connect(function()
			if check_binder_or_dropdown_or_textbox_active() then
				return -- alr highlight in -> check_binder_or_dropdown_or_textbox_active()
			else -- no mode active (start dropdown mode)
				current_selector = drd_button_page
				highlight()
			end

			if not dropdown_mode then
				dropdown_mode = true --dropdown mode
				dropdown_focus = drd_button --focus in this dropdown
				dropdown_page = drd_button_page
				drd_button_page.Visible = true
				drd_button_exit.Visible = true
				TS(frame1, 0.25,{ZIndex = 5}, 1) --focus mode start
			end

			drd_get_nextframe()
			if #drd_frame_table > 1 then --if more than 1 page
				drd_button_page_info.Text = (drd_frame_display.. "/".. #drd_frame_table)
			else
				drd_button_page_info.Text = "1/1"
			end

			if drd_frame_display == 1 then --if first button then hide the last page
				drd_frame_table[#drd_frame_table].Visible = false
			else -- hide the previous page
				drd_frame_table[drd_frame_display-1].Visible = false
			end
			drd_frame_table[drd_frame_display].Visible = true
		end)
		drd_callback(drd_list_return) --return list














	else							-- DYNAMIC
		local drd_old_connect = {}
		local drd_old_active_name = {}
		local drd_button_counter
		local list_temp_counter = 0
		local list_temp -- list saved here
		local list_type
		local function update_list()
			if type(drd_list) == "table" then -- table or function (static or dynamic)
				list_temp = drd_list
			elseif type(drd_list) == "function" then
				list_temp = drd_list()
			else print("error drd_list input")
			end

			list_temp_counter = 0
			for _,v in pairs(list_temp) do -- can use #list_temp for array
				list_temp_counter += 1
			end
		end
		update_list()
		
		if #list_temp == 0 then  -- == 0 meant table
			list_type = "table"
		else list_type = "array"
		end

		local function drd_getbutton(x) -- makesure button in numerical order is smaller than maxbutton/page
			if x <= drd_maxbutton_page then --smaller than max button on screen
				return x
			else --greater max button on screen
				repeat
					x -= drd_maxbutton_page
				until x <= drd_maxbutton_page
			return x
			end
		end

		local function drd_get_nextframe() -- get frame for 'Page' button
			for _,v in pairs(drd_frame_table) do
				if v.Visible then
					drd_frame_display += 1 -- + 1 page if there a visible page
					break
				end
			end
			if drd_frame_display > #drd_frame_table then -- reset page
				drd_frame_display = 1
			end
		end
		
		local function drd_amount_frame()
			local x = #drd_frame_table * drd_maxbutton_page - list_temp_counter
			return x
		end
	
		local function drd_fire_old_active_button()
			for _,v in pairs(drd_old_active_name) do
				for _,v2 in pairs(drd_frame_table) do
					for _,v3 in pairs(v2:GetChildren()) do
						if v3.Text == v then
							firesignal(v3.MouseButton1Click)
						end
					end 
				end 
			end
		end
	
		drd_button_exit.MouseEnter:Connect(function()
			current_selector = drd_button_exit
			highlight()
		end)
	
		drd_button_exit.MouseButton1Click:Connect(function()
			current_selector = drd_button
			highlight()
			dropdown_mode = false
			dropdown_focus = nil
			dropdown_page = nil
			drd_button_exit.Visible = false
			drd_button_page.Visible = false
			for _,v in pairs(drd_frame_table) do
				v.Visible = false
			end
			TS(frame1, 0.25,{ZIndex = 0}, 1) --focus mode end
		end)

		drd_button_page.MouseEnter:Connect(function()
			current_selector = drd_button_page
			highlight()
		end)

		drd_button_page.MouseButton1Click:Connect(function()
			highlight() -- jsut for animation

			drd_get_nextframe()
			if #drd_frame_table > 1 then --if more than 1 page
				drd_button_page_info.Text = (drd_frame_display.. "/".. #drd_frame_table)
			else
				drd_button_page_info.Text = "1/1"
			end

			if drd_frame_display == 1 then --if first button then hide the last page
				drd_frame_table[#drd_frame_table].Visible = false
			else -- hide the previous page
				drd_frame_table[drd_frame_display-1].Visible = false
			end
			drd_frame_table[drd_frame_display].Visible = true
		end)

		drd_button.MouseEnter:Connect(function()
			if not check_binder_or_dropdown_or_textbox_active() then
				current_selector = drd_button
				highlight()
			end
		end)

		drd_button.MouseButton1Click:Connect(function()
			if check_binder_or_dropdown_or_textbox_active() then
				return -- alr highlight in -> check_binder_or_dropdown_or_textbox_active()
			else -- no mode active (start dropdown mode)
				current_selector = drd_button_page
				highlight()
				update_list() --update list once on press

				table.clear(drd_old_active_name)
				for _,v in pairs(drd_list_return) do
					table.insert(drd_old_active_name, v)
				end
				print "press1"
				drd_fire_old_active_button() --does not thing on inject, press -> empty drd_list_return -- off

				if drd_amount_frame() <= -1 then -- need MORE frame
					repeat
						local drd_frame = Instance.new'Frame'
						drd_frame.Parent = drd_button
						drd_frame.BackgroundColor3 = color36
						drd_frame.Transparency = 1
						drd_frame.BorderSizePixel = 0
						drd_frame.Position = UDim2.new(drd_list_frame_X, 0, drd_list_frame_Y, 0)
						drd_frame.Size = UDim2.new(1, 0, 1, 0) --doesn't matter this frame just for visible button inside (scale 1, 1 for easier placing button inside)
						drd_frame.Visible = false
	
						table.clear(drd_frame_table)
						for _,v in pairs(drd_button:GetChildren()) do
							if v:IsA'Frame' then
								table.insert(drd_frame_table, v)
							end
						end
					until drd_amount_frame() >= 0
	
				elseif drd_amount_frame() >= drd_maxbutton_page then --	need LESS frame
					repeat
						drd_frame_table[#drd_frame_table]:Destroy()
						table.remove(drd_frame_table, #drd_frame_table)
					until  drd_amount_frame() <= (drd_maxbutton_page - 1)
	
				end

				drd_button_counter = 0 -- 0 cuz we change it at the start
				for _,v in pairs(drd_frame_table) do -- place enough buton in all frame																								
					for _,v2 in pairs(v:GetChildren()) do
						drd_button_counter += 1
						if drd_button_counter > list_temp_counter then -- need LESS button
							v2:Destroy()
							drd_button_counter -= 1
						end
					end
					if #v:GetChildren() < drd_maxbutton_page and drd_button_counter < list_temp_counter then -- need MORE button
						repeat
							drd_button_counter += 1
							local drd_list_button = Instance.new'TextButton'
							drd_list_button.Parent = v
							drd_list_button.BackgroundColor3 = color36
							drd_list_button.BackgroundTransparency = 0.8
							drd_list_button.BorderSizePixel = 0
							--drd_list_button.Position = --this will be set below
							drd_list_button.Size = UDim2.new(1, 0, 1, 0)
							drd_list_button.Font = Enum.Font.GothamBlack
							--drd_list_button.Text = tostring(v)
							drd_list_button.TextColor3 = color37
							drd_list_button.TextTransparency = 0.2
							drd_list_button.TextSize = 16
							drd_list_button.ZIndex = 6 --set high as default cuz we gonna change visible of it's parent frame
							drd_list_button.TextTruncate = Enum.TextTruncate.AtEnd
							drd_list_button:SetAttribute("detail", drd_detail)
							drd_list_button:SetAttribute("type", "[TOGGLE]")
						
							local drd_list_button_frame = Instance.new'Frame'
							drd_list_button_frame.Parent = drd_list_button
							drd_list_button_frame.BackgroundColor3 = color36
							drd_list_button_frame.BackgroundTransparency = 0.8
							drd_list_button_frame.BorderSizePixel = 0
							drd_list_button_frame.Position = UDim2.new(1.15, 0, 0.5, 0)
							drd_list_button_frame.Size = UDim2.new(0.25, 0, 0.75, 0)
							drd_list_button_frame.ZIndex = 5 --set high as default cuz we gonna change visible of it's parent frame
							drd_list_button_frame.AnchorPoint = Vector2.new(0.5, 0.5)
						until #v:GetChildren() == drd_maxbutton_page or drd_button_counter == list_temp_counter
					end
				end
	
				for _,v3 in pairs(drd_old_connect) do
					v3:Disconnect()
				end
				table.clear(drd_old_connect)
	
				drd_button_counter = 0 -- 1 cuz we change it at the end -- this will change in loop to set position, text
				drd_button_X_distance = -3.75 -- reset to 0 before enter loop
				local temp_button_counter
				for i,v in pairs(list_temp) do -- set text, true/false, position all button
					drd_button_counter += 1
					temp_button_counter = drd_getbutton(drd_button_counter)
					for i2,v2 in pairs(drd_frame_table) do
						if drd_button_counter > drd_maxbutton_page * i2 then -- go to next page
							continue
						end
						for i3,v3 in pairs(v2:GetChildren()) do
							if i3 == temp_button_counter then
								--local drd_number_for_list = drd_button_counter		-- this will not change save it as a number to each button
								local tf = false -- only for visual no need for default t/f (drd_fire_old_active_button cover that)
								local drd_list_buttton_animation = v3.Frame -- drd_list_button_frame
								if list_type == "table" then -- set text, true/false
									v3.Text = tostring(i) -- table 
								elseif list_type == "array" then
									v3.Text = tostring(v) -- array
								end
								local text = v3.Text
								local drd_old_mouse_enter
								drd_old_mouse_enter = v3.MouseEnter:Connect(function()
									current_selector = v3
									highlight()
								end)
								table.insert(drd_old_connect, drd_old_mouse_enter)

								local drd_old_mouse_click
								drd_old_mouse_click = v3.MouseButton1Click:Connect(function() 
									tf = not tf -- change true/false on click

									if drd_target == 'single' then --single select
										if current_selector == v3 then --highlight this button when false but not by the firesignal above
											highlight()	
										end
			
										if tf then print("on")
											if drd_single_button ~= nil then -- other button is active
												firesignal(drd_single_button.MouseButton1Click) -- trigger tf(false) of that button
											end
											
											table.clear(drd_list_return) --empty list
											drd_list_return[1] = text --add this button name to return
											drd_single_button = v3 --active button
											TS(drd_list_buttton_animation, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundColor3 = color37}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundTransparency = 0}, 1)
										else print("off")
											table.clear(drd_list_return)--empty list, will trigger by firesignal above
											drd_single_button = nil --no actice button
											TS(drd_list_buttton_animation, 0.2, {Size = UDim2.new(0.25, 0, 0.75, 0)}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundColor3 = color36}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundTransparency = 0.8}, 1)
										end
									else --multi slect
										if current_selector == v3 then --highlight this button when false but not by the firesignal above
											highlight()
										end
			
										if tf then
											if not table.find(drd_list_return, text) then
												table.insert(drd_list_return, text) --add this button's name to list
											end
											TS(drd_list_buttton_animation, 0.2, {Size = UDim2.new(0.15, 0, 0.45, 0)}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundColor3 = color37}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundTransparency = 0}, 1)
										else
											if table.find(drd_list_return, text) then
												table.remove(drd_list_return, table.find(drd_list_return, text))
											end
											-- for i4,v4 in pairs(drd_list_return) do
											-- 	--if v4 == list_temp[drd_number_for_list] then --remove this button's name from list -- check for game's instance(error if disappear)
											-- 	if v4 == text then --remove this button's name from list -- check for button
											-- 		table.remove(drd_list_return, i4)
											-- 	end
											-- end
											TS(drd_list_buttton_animation, 0.2, {Size = UDim2.new(0.25, 0, 0.75, 0)}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundColor3 = color36}, 1)
											TS(drd_list_buttton_animation, 0.2, {BackgroundTransparency = 0.8}, 1)
										end
									end
									drd_callback(drd_list_return) --return list
								end)
								table.insert(drd_old_connect, drd_old_mouse_click)
			
								if temp_button_counter < drd_maxbutton_row then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 0, 0) --Y first line(frame)
									drd_button_X_distance += 1.5
								elseif temp_button_counter == drd_maxbutton_row then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 0, 0)
									drd_button_X_distance = -3.75 --reset(newline)
								elseif temp_button_counter < drd_maxbutton_row * 2 then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 2.5, 0) --Y scale second line
									drd_button_X_distance += 1.5
								elseif temp_button_counter == drd_maxbutton_row * 2 then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 2.5, 0)
									drd_button_X_distance = -3.75 --reset(newline)
								elseif temp_button_counter < drd_maxbutton_page then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 5, 0) --Y scale third line
									drd_button_X_distance += 1.5
								elseif temp_button_counter == drd_maxbutton_page then
									v3.Position = UDim2.new(drd_button_X_distance, 0, 5, 0)
									drd_button_X_distance = -3.75 --reset(newline)
								end

							break
							end
						end
					break
					end
				end
				print "press222"
				drd_fire_old_active_button() --trigger default true visual on press, fire new name that match old name -- on
			end
	
			if not dropdown_mode then
				dropdown_mode = true --dropdown mode
				dropdown_focus = drd_button --focus in this dropdown
				dropdown_page = drd_button_page
				drd_button_page.Visible = true
				drd_button_exit.Visible = true
				TS(frame1, 0.25,{ZIndex = 5}, 1) --focus mode start
			end
	
			drd_get_nextframe()
			if #drd_frame_table > 1 then --if more than 1 page
				drd_button_page_info.Text = (drd_frame_display.. "/".. #drd_frame_table)
			else
				drd_button_page_info.Text = "1/1"
			end

			if drd_frame_display == 1 then 		--if first page then hide the last page
				drd_frame_table[#drd_frame_table].Visible = false
			else 								-- hide the previous page
				drd_frame_table[drd_frame_display-1].Visible = false
			end
			drd_frame_table[drd_frame_display].Visible = true -- current page
		end)

		for i,v in pairs(list_temp) do -- FIRST CHECK TRUE/FALSE
			if v == "on44" then -- have to use differ naame to not triggerr tru44 in firesignal
				table.insert(drd_list_return, i)
			end
		end

		drd_callback(drd_list_return) --return list
	end
end
--------------------------------------------------------------------------------------------

local function first_highlight()
	if current_selector == nil then -- first highlight -- only need to run once but it need run after all button call
		for _,v in pairs(all_button()) do 
			if v.AbsolutePosition.X < max then
				max = v.AbsolutePosition.X
				current_selector = v
				highlight()
			end
		end
		reset_xytemp()
	end
end

UIS.InputBegan:Connect(function(x)
	if x.KeyCode == gui44 then
		if getgenv().gui_open44 == "press" then -- press

			if not frame1.Visible then
				UI_input = UIS.InputEnded:Connect(function(x2)
					if x2.KeyCode == up44 or x2.KeyCode == up45 then -- inside gui input
						keymove'up'
					elseif x2.KeyCode == down44 or x2.KeyCode == down45 then
						keymove'down'
					elseif x2.KeyCode == right44 or x2.KeyCode == right45 then
						keymove'right'
					elseif x2.KeyCode == left44 or x2.KeyCode == left45 then
						keymove'left'
					elseif x2.KeyCode == select44 then
						keymove'Enter'
					end
				end)
				frame1.Visible = true
				frame2.Visible = true
				--screen.Enabled = true
				TS(frame1, 0.2, {Transparency = 0.05}, 1)
			else
				frame1.Visible = false
				frame2.Visible = false
				--screen.Enabled = false
				TS(frame1, 0.2, {Transparency = 1}, 1)
				UI_input:Disconnect()
			end
			first_highlight()
		else	  			 	 	 	-- hold

			UI_input = UIS.InputEnded:Connect(function(x2) -- released hold check / close gui
				if x2.KeyCode == gui44 then
					frame1.Visible = false
					frame2.Visible = false
					--screen.Enabled = false
					frame1.Transparency = 1
					UI_input:Disconnect()
				elseif x2.KeyCode == up44 or x2.KeyCode == up45 then -- inside gui input
					keymove'up'
				elseif x2.KeyCode == down44 or x2.KeyCode == down45 then
					keymove'down'
				elseif x2.KeyCode == right44 or x2.KeyCode == right45 then
					keymove'right'
				elseif x2.KeyCode == left44 or x2.KeyCode == left45 then
					keymove'left'
				elseif x2.KeyCode == select44 then
					keymove'Enter'
				end
			end)
			first_highlight()
			task.wait(.12) -- hold check / open gui
			if hold() then task.wait(.12)
				if hold() then
					frame1.Visible = true
					frame2.Visible = true
					--screen.Enabled = true
					TS(frame1, 0.2, {Transparency = 0.05}, 1)
				end
			end
		end
	end
end)
--------------------------------------------------------------------------------------------
-- X - X 170 pixel, Y - Y 100 pixel
-- (0.31, 0, 0.33, 0) to go beyond the chat box

-- space Y after big button 0.8 | small button 0.6
-- space X but [button] 0.1
getgenv().acs = 1

text("Main", UDim2.new(0.1, 0, 0.28, 0)) -- last args text's size 40
text("Setting", UDim2.new(0.4, 0, 0.13, 0)) -- last args text's size 40
text("Others", UDim2.new(0.7, 0, 0.13, 0)) -- last args text's size 40
button("button1sssssssssssssssssssssssss", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.1, 0, 0.34, 0), 
	function() getgenv().acs += 1 noti('Auto'.. getgenv().acs) end)	

button("button2", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.1, 0, 0.42, 0), 
	function() print('button2') end)

button("button3", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.1, 0, 0.50, 0), 
	function() print('button3') end)

button("button1sssssssssssssssssssssssss", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.2, 0, 0.34, 0), 
	function() getgenv().acs += 1 noti('Auto'.. getgenv().acs) end)	
--------------------------------------------

toggle("toggle11111111111111111111111111111", 'placeholder1\nplaceholder1\nplaceholder1',
	false, UDim2.new(0.1, 0, 0.58, 0), 
	function(x) getgenv().bool1 = x spawn(function() while bool1 do task.wait(.5) print("A") end end) end)


toggle("toggle2", 'placeholder1\nplaceholder1\nplaceholder1',
	false, UDim2.new(0.1, 0, 0.66, 0), 
	function(x) getgenv().bool2 = x spawn(function() while bool2 do task.wait(.5) print("AA") end end) end)


toggle("toggle3", 'placeholder1\nplaceholder1\nplaceholder1',
	false, UDim2.new(0.1, 0, 0.74, 0), 
	function(x) getgenv().bool3 = x spawn(function() while bool3 do task.wait(.5) print("AAA") end end) end)
--------------------------------------------

slider("walk speed11111111111111111111111111111111", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.1, 0, 0.82, 0),
	16, 100, 50, 
	function(x)  end)

slider("slider2", 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.1, 0, 0.88, 0),
	47, 58, 50, 
	function(x) print(x) end)
--------------------------------------------

binder('Binder111111111111111111111111111111111', 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.4, 0, 0.19, 0),
	Enum.KeyCode.L, function() noti"test" end)

binder('Binder2', 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.4, 0, 0.27, 0),
	Enum.KeyCode.L, function() print'Binder2'end)

binder('Binder3', 'placeholder1\nplaceholder1\nplaceholder1',
	UDim2.new(0.4, 0, 0.35, 0), 
	Enum.KeyCode.L, function() print'Binder3'end)

--------------------------------------------
-- dropdown('Wood',
-- 	UDim2.new(0, 500, 0, 150),
-- 	game.Players:GetChildren(), function(x) getgenv().dropdown1 = x end)

-- dropdown(' Wood',
-- 	UDim2.new(0, 800, 0, 150),
-- 	{"ha 123c2", "kik2'sd2","     1w;s"}, function(x) getgenv().dropdown2 = x end)

dropdown2('Woodggggggggggggggggggggggggggggg', 'multi select\nstatic dropdown',
	UDim2.new(0.4, 0, 0.43, 0), 'multi', 'static',
	{'1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','1ddddddddddddddddddddddddddddddddddd9','20','21','22','23','24','25'}, function(x) getgenv().dropdown1 = x end)
		--test here
		spawn(function()
			while task.wait(.5) do
				for _,v in pairs(getgenv().dropdown1) do
					print(v)
				end
			end
		end)

dropdown2('Wood', 'single select \ndynamic dropdown',
	UDim2.new(0.7, 0, 0.43, 0), 'single', 'dynamic',--430 up -- 420 down (neat)
	function() return game.Players:GetChildren() end, function(x) getgenv().dropdown2 = x end)
		--test here
		spawn(function()
			while task.wait(.5) do
				for _,v in pairs(getgenv().dropdown2) do
					print(v)
				end
			end
		end)

		local temp_table
		getgenv().temp_table = {hob1 = "on44", kidfs1 = "",hob2 = "", aani = "", kidfs2 = ""} -- add method -> getgenv().temp_table["hi9"] = ""
		--getgenv().temp_table = {"hob1" , "kidfs1" ,"hob2"  , "aani" , "kidfs2" } -- add method -> table.insert(getgenv().temp_table, "wer")
dropdown2('Wood', 'single select \ndynamic dropdown',
UDim2.new(0.7, 0, 0.51, 0), 'single', 'dynamic',--430 up -- 420 down (neat)
getgenv().temp_table, function(x) getgenv().dropdown3 = x end)
	--test here
	spawn(function()
		while task.wait(5) do
			for _,v in pairs(getgenv().dropdown3) do
				print(v)
			end
		end
	end)
box("Input", "text 123", UDim2.new(0.4, 0, 0.59, 0), function(x) noti(x) end)

box("Input", "text 123", UDim2.new(0.4, 0, 0.65, 0), function(x) noti(x) end)

--------------------------------------------
--Y - Y 16 pixel
--text("Auto farm v3 - fix", UDim2.new(0.01, 0, 0.01, 0), 25)
--text("Support Mouse and Keyboard \nWASD, Arrows key, E to slect", UDim2.new(0.045, 0, 0.92, 0), 15)
--text("WASD, Arrows key, E to slect", UDim2.new(0, 70, 0, 786), 15)
----------------------------------------------

line(UDim2.new(0,0,0,36), UDim2.new(1,0,0,3)) -- position, size
line(UDim2.new(0,0,0.26,0), UDim2.new(0.30,0,0,3))

--------------------

--line(UDim2.new(0, 100, 0, 780), UDim2.new(0, 200, 0, 2))
--line(UDim2.new(0, 500, 0, 780), UDim2.new(0, 500, 0, 2))

-- everithing working!
-- tidyup code , universal delay	
-- local gui = ... -- some GUI
-- local desiredAbsolutePosition = -- some Vector2
-- local relativePosition = desiredAbsolutePosition - gui.Parent.AbsolutePosition
-- gui.Position = UDim2.fromOffset(relativePosition.X, relativePosition.Y)

--add check for binder_mode and dropdow_nmode when button1press on binder and dropdown  
--slider keyboard input settup when highlight?
--instead of check for button1click check for highlight?

--Done can't press other button when on Focus mode

--Done check before highlight
--Done use other method for single dropdown

--Done fix notification table
--Done change TS() add TYPE 1, 2
--Done change how highlight work (no tween conflict(TS TYPE 2))
--Done add highlight() on press button using mouse
--Done new notification
--Done highlight on press for drd_list_button
--fix togggle callback or spawn(function()) like drd ?
--remove all instance's name -- ready for random strring name ?
--Done changed font
--Done math.floor for slider keyboard capture
--Done press mode and hold mode for start gui
--Done replace check for screen enabled with frame1 visible (notification)
--Done small fix so when gui clsoed binder actives won't register new key
--Done change all function to local function
-- if local function can another local function the one being call second have to declair first
-- imagine if something call a local function it will search for the previous code (from the line being call going up)
--Done small fix on drd_button (highlight on start dropdown mode)
--Done small change at line 688 ()== false) to (until not)
--need working on dynamic dropdown
--Done Dynamic dropdown(string output), fix highlight drd_list_button(tf), reset on close and open button
-- small fix at drd_list_frame position (up or down) (+100 line 892)
--Done 
--Log button ?
--small change RichText(under line)
--small change Next button in drd, Enum.Font.GothamBlack for Text()
--some change at drd list frame set position(above or below), 100 - 120,  change background transparency to 0.3 
--TextTruncate for all name's Text, resize textlabel and textsize of slider name's Text
--fixed drd_list_frame_X, above_or_below to 4.5
-- changed how 		local drd_old_active_name = {} work
-- Done relocate drd_ stuff at middle screen || small change all_button() for this drd_ (add 1 for check) || small change check_binder_or_dropdown_or_textbox_active() -> less annyoing
-- changed toggle display, 6 button/page instead of 7

--working on optimise drd (variable = 6x3 for all in stead of max button/page)
-- idea input box (all black) able to add to dropdown list (PLS DONATE)

--muliple change, clean for drd_	
-- DONE reanimation highlight
-- DONE text()
-- DONE fixed color of slider
-- Done comment out vertical_highlight
-- DONE comment out text()Zindex
-- DONE new animation toggle
-- DONE details_txt3.TextScaled = true
-- DONE type attribute
-- DONE scale NOTI , scale SLI_INFO, scale text(), scale details_txt_0,1,2
-- DONE small change at multi target check for true/alse that help default true/false work rights
-- DONE fixed update_list()

-- use all table no array????
-- DONE default true/false -> work on others type of drd_button -> ready for save
-- OPTIMISE singe/multi, /static/dynamic, table/dictionary
-- DONE solve the problem for 3 fors list,frame,button -> NEED OPTIMISE(wrong position)
-- spaming drd_list() need to fix this to reduce time excution
-- stop open gui until all loaded and notification
-- scale calculate
-- idea working on true/false option input also setting using {} setting
-- default status (enabled features, discord)
